#!/usr/bin/env python3
#########################################
# Copyright Â© 2018
# Author: Hans Hony - hhony
#

import argparse
from tools import AudioCapture, QtCore, PlotSignalWindow, TriadFilter
from tools import logger, set_level
from signal import signal, Signals, SIGINT, SIGTERM
from sys import exit as sys_exit


class VisualizeHarmonics:
    def __init__(self, threshold, db_gain, single_tail, verbose, update_ms):
        self._plot = PlotSignalWindow()
        self._audio = AudioCapture()
        self._verbose = verbose
        self._threshold = threshold
        self._db_gain = db_gain
        self._single_tail = single_tail
        self._update_ms = update_ms
        self._sinx = None
        self._siny = None
        self._x = None
        self._y = None
        self._timer = QtCore.QTimer()
        self._timer.timeout.connect(self.update)
        signal(SIGINT, self.sig_handler)
        signal(SIGTERM, self.sig_handler)

    def start(self):
        self._audio.start()
        self._timer.start(self._update_ms)
        self._plot.start()

    def stop(self):
        self._audio.close()
        self._timer.singleShot(0, self._plot.app.quit)
        self._timer.stop()
        sys_exit(self._plot.app.exec_())

    def update(self):
        if not self._audio.has_captured:
            return
        self._x, self._y = self._audio.fft(
            db_gain=float(self._db_gain),
            single_tail=float(self._single_tail)
        )
        triad = TriadFilter(
            self._x, self._y,
            verbose=self._verbose,
            threshold=float(self._threshold)
        )
        chord = triad.filter()
        if self._siny is None:
            self._sinx, self._siny = triad.get_profile()
        self._plot.draw('threshold', self._x, triad.threshold(), pen='g')
        self._plot.draw('inputfilter', self._sinx, self._siny, pen='g')
        self._plot.draw('frequencies', self._x, self._y)
        if chord['root']:
            logger.info('chord: %s%s', chord['root'], chord['third'])
        self._audio.has_captured = False

    def sig_handler(self, sig, stack):
        logger.debug('stack %s', stack)
        self._plot.app.quit()
        logger.info('terminating %s (%s)', Signals(sig).name, sig)


class SmartFormatter(argparse.RawDescriptionHelpFormatter):
    def _split_lines(self, text, width):
        if text.startswith('R|'):
            return text[2:].splitlines()
        # this is the RawTextHelpFormatter._split_lines
        return argparse.HelpFormatter._split_lines(self, text, width)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='visualize-harmonics',
        formatter_class=lambda prog: SmartFormatter(prog, max_help_position=150, width=160),
        description='plots and filters the Fast Fourier Transform of musical triads in real-time'
    )
    parser.add_argument(
        '-t', '--db-threshold', '--threshold',
        dest='threshold', default=2e+4,
        help='filter: sets the default magnitude threshold level'
    )
    parser.add_argument(
        '-g', '--db-gain',
        dest='db_gain', default=1e-1,
        help='capture: adjust the capture gain log10'
    )
    parser.add_argument(
        '--single-tail-fft',
        dest='single_tail', action='store_true', default=False,
        help='capture: single-tail fft'
    )
    parser.add_argument(
        '-l', '--log-level',
        dest='log_level', default='INFO',
        help='sets the default logging level'
    )
    parser.add_argument(
        '-s', '--ms', '--speed-ms',
        dest='update_ms', default=10,
        help='capture: sets the refresh rate of graph in milliseconds. default: 50'
    )
    parser.add_argument(
        '-v', '--verbose',
        dest='verbose', action='store_true', default=False,
        help='shows verbose signal output'
    )
    args = parser.parse_args()

    if args.log_level != 'INFO':
        set_level(args.log_level)

    visualizer = VisualizeHarmonics(
        args.threshold,
        args.db_gain,
        args.single_tail,
        args.verbose,
        args.update_ms
    )
    # start window
    visualizer.start()
    # exit after window closed
    visualizer.stop()
