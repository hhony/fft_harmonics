#!/usr/bin/env python3
#########################################
# Copyright Â© 2018
# Author: Hans Hony - hhony
#

import argparse
from tools import AudioCapture, QtCore, PlotSignalWindow
from sys import exit as sys_exit


class SmartFormatter(argparse.RawDescriptionHelpFormatter):
    def _split_lines(self, text, width):
        if text.startswith('R|'):
            return text[2:].splitlines()
        # this is the RawTextHelpFormatter._split_lines
        return argparse.HelpFormatter._split_lines(self, text, width)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='visualize-harmonics',
        formatter_class=lambda prog: SmartFormatter(prog, max_help_position=150, width=160),
        description='plots and filters the Fast Fourier Transform of musical triads in real-time'
    )
    parser.add_argument(
        '--update-ms', '--refresh-ms',
        dest='update_ms', default=50,
        help='sets the refresh rate of graph in milliseconds. default: 50'
    )
    args = parser.parse_args()

    _plot = PlotSignalWindow()
    _audio = AudioCapture()
    _audio.start()

    def update():
        global _plot, _audio
        if not _audio.has_captured:
            return
        x, y = _audio.fft()
        _plot.draw('random', x, y)
        _audio.has_captured = False
    # setup timer poll
    timer = QtCore.QTimer()
    timer.timeout.connect(update)
    timer.start(args.update_ms)
    # start visualization
    _plot.start()
    # cleanup after window closed
    _audio.close()
    timer.singleShot(0, _plot.app.quit)
    timer.stop()
    sys_exit(_plot.app.exec_())